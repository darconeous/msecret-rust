// MSecret
//
// Copyright 2023 Robert Quattlebaum
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use super::*;

#[derive(Debug, clap::Args)]
pub struct CommandBytes {
    /// The number of bytes to generate.
    #[arg(value_name = "BYTE-COUNT")]
    len: usize,

    /// The output format for the generated bytes.
    #[arg(short, long, value_name = "FORMAT", default_value = "hex")]
    format: BinFormat,

    /// Where to save the generated bytes on the local filesystem.
    #[arg(short, long, value_name = "FILENAME")]
    output: Option<std::path::PathBuf>,
}

impl CommandBytes {
    pub fn process<T: AsMut<S>, S: ToolState, W: Write>(
        &self,
        mut tool_state: T,
        out: &mut W,
    ) -> Result<(), Error> {
        let tool_state = tool_state.as_mut();
        let secret = tool_state.current_secret()?;
        let bytes = secret.extract_bytes(self.len)?;

        let keypath = tool_state.get_keypath()?;

        tool_state
            .key_map_mut()
            .update(keypath)
            .unwrap()
            .add_primitive(format!("bytes-{}", self.len));

        if let Some(path) = self.output.as_ref() {
            std::fs::write(path, self.format.to_string(&bytes)?)?;
        } else {
            self.format.write(out, &bytes)?;
        }

        Ok(())
    }
}
